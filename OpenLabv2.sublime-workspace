{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cop",
				"copiedAndPasted"
			],
			[
				"Leve",
				"LevelsOfMastery"
			],
			[
				"get",
				"getMaxOrder"
			],
			[
				"lastViewed",
				"lastViewedChildOrAdvisee"
			],
			[
				"border-",
				"border-width"
			]
		]
	},
	"buffers":
	[
		{
			"file": "client/views/openlab/standards_list.html",
			"settings":
			{
				"buffer_size": 5727,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "  /************************/\n /*** STANDARDS LIST  ****/\n/************************/\n\nTemplate.standardsList.onRendered(function() {\n  $('.fa.fa-question-circle[data-toggle=\"tooltip\"]').tooltip();\n});\n\nTemplate.standardsList.helpers({\n  categories: function() {\n    var selector = {};\n    if (!editingMainPage())\n      selector.visible = true; //show only visible categories\n    return Categories.find(selector,{sort: {order: 1}});\n  },\n  sortableOpts: function() {\n    return {\n      draggable:'.categorytitle',\n      handle: '.sortCategory',\n      collection: 'Categories',\n      selectField: 'app', //selects all categories\n      selectValue: 'openlab', //as openlab is only allowed value of app field\n      disabled: !editingMainPage() \n    }\n  }\n});\n\n  /*************************/\n /**** CATEGORY TITLE  ****/\n/*************************/\n\nTemplate.categoryTitle.helpers({\n  active: function() {\n    var activeCategory = openlabSession.get('activeCategory');\n    return (this._id == activeCategory) ? 'active' : '';\n  },\n  active2: function() {\n    return (this._id == openlabSession.get('activeCategory2')) ? 'active2':'';\n  },\n  hidden: function() {\n    var activeCategory = openlabSession.get('activeCategory');\n    var activeCategory2 = openlabSession.get('activeCategory2');\n    return ((this._id == activeCategory) || (this._id == activeCategory2)) ? '' : 'hidden';\n  },\n  percentExpected: function() { \n    return 0; //replace this by checking standard.masteryExpected\n  },\n  percentCompleted: function() { //percentCompleted \n    return 0; //replace this by checking levelOfMastery.level\n  }\n});\n\nTemplate.categoryTitle.events({\n  'click li > a': function(event,tmpl) {\n    event.preventDefault();\n    $('#workPeriodPopoverX').modal('hide'); // fixes bug in workPeriodPopoverX ... see notes there\n    if (event.ctrlKey) {\n      var activeCategory2 = openlabSession.get('activeCategory2');\n      var activeCategory = openlabSession.get('activeCategory');\n      if (tmpl.data._id == activeCategory2) {\n        openlabSession.set('activeCategory2',null);\n      } else if (tmpl.data._id == activeCategory){\n        return;\n      } else if ((activeCategory2) && (tmpl.data._id == activeCategory)) {\n        openlabSession.set('activeCategory',activeCategory2);\n        openlabSession.set('activeCategory2',null);\n      } else {\n        openlabSession.set('activeCategory2',tmpl.data._id);\n      }\n    } else {\n      openlabSession.set('activeCategory',tmpl.data._id);\n      if (tmpl.data._id == openlabSession.get('activeCategory2'))\n        openlabSession.set('activeCategory2',null);\n    }\n  },\n  'dragstart li > a': function(event,tmpl) {\n    //bootstrap navs are draggable by default\n    //disabling this behavior so you have to grab\n    //the draggable handle to sort the categories\n    event.preventDefault();\n  }\n})\n\n  /*****************************/\n /** ACTIVITY LIST HEADER  ****/\n/*****************************/\n\nTemplate.standardListHeader.helpers({\n  colWidth: function() {\n    return openlabSession.get('activeCategory2') ? 'col-md-6' : 'col-md-12';\n  },\n  bgsuccess: function() {\n    return openlabSession.get('activeCategory2') ? 'bgsuccess' : 'bgprimary';\n  },\n  bgprimary: function() {\n    //return 'bgprimary';\n    return openlabSession.get('activeCategory2') ? 'bgprimary' : '';\n  },\n  percentExpected: function() { \n    var selector = {\n      categoryID: this._id,\n      visible: true //only visible standards count\n    }\n    var total = Standards.find(selector).count(); \n    if (total == 0)\n      return 0;\n    var today = new Date();\n    selector.masteryExpected = {$lt:today};\n    var expected = Standards.find(selector).count(); \n    return expected*100/total;\n  },\n  percentCompleted: function() { \n    var studentID = Meteor.impersonatedOrUserId();\n    if (!Roles.userIsInRole(studentID,'student'))\n      return 0;\n    var selector = {\n      categoryID: this._id,\n      visible: true //only visible standards count\n    }\n    var standards = Standards.find(selector).fetch();\n    var total = standards.length;\n    if (total == 0)\n      return 0;\n    standards = standards.filter(function(standard) {\n      var LoM = LevelsOfMastery.findOne({standardID:standardID,studentID:studentID});\n      if (!LoM) return false;\n      var level = LoM.average.schoolyear; //edit to select grading period when available\n      if (stan)\n      var index = standard.scale.indexOf(level);\n      return (index == standard.scale.length - 1);\n    })\n  }\n});\n\n\n  /*************************/\n /** STANDARD LIST  *******/\n/*************************/\n\nTemplate.standardList.onCreated(function() {\n  instance = this;\n\n  instance.autorun(function() {\n    var userID = Meteor.impersonatedOrUserId();\n    if (!userID)\n      return;\n    var categoryID = instance.data._id;\n    //first get the info that will be immediately shown\n    var LoMsThisCategory = Meteor.subscribe('levelsOfMastery',categoryID,userID,null);\n\n    if (LoMsThisCategory.ready()) { //then load the rest in the background\n      var LoMsThisUser = Meteor.subscribe('levelsOfMastery',null,userID,null); \n      if (LoMsThisUser.ready() && Roles.userIsInRole(Meteor.userId(),'teacher'))\n        Meteor.subscribe('levelsOfMastery',categoryID,null,null);\n    }\n  })\n})\n\nTemplate.standardList.helpers({\n  colWidth: function() {\n    return openlabSession.get('activeCategory2') ? 'col-md-6' : 'col-md-12';\n  },\n  standards0: function() {\n    var selector = {\n      categoryID: this._id\n    };\n    if (!editingMainPage())\n      selector.visible = true; //show only visible activities\n    return Standards.find(selector,{sort: {order: 1}}); \n  },\n  standards2: function() {\n    var activeCategory2 = openlabSession.get('activeCategory2');\n    var selector = {\n      categoryID: this._id\n    };\n    if (!editingMainPage())\n      selector.visible = true; //show only visible activities\n    return Standards.find(selector,{sort: {order: 1}}); \n  },\n  bgsuccess: function() {\n    return openlabSession.get('activeCategory2') ? 'bgsuccess' : '';\n  },\n  bgprimary: function() {\n    //return 'bgprimary';\n    return openlabSession.get('activeCategory2') ? 'bgprimary' : '';\n  },\n  sortableOpts2: function() {\n    var activeCategory2 = openlabSession.get('activeCategory2');\n    return {\n      draggable:'.sItem',\n      handle: '.sortStandard',\n      group: 'standardColumn',\n      collection: 'Standards',\n      selectField: 'categoryID',\n      selectValue: activeCategory2,\n      disabled: !editingMainPage() //currently not working\n      //disabled: (!Session.get('editedWall')), //!= this.wallID to apply to a single wall \n    }    \n  },\n  sortableOpts: function() {\n    return {\n      draggable:'.sItem',\n      handle: '.sortStandard',\n      group: 'standardColumn',\n      collection: 'Standards',\n      selectField: 'categoryID',\n      selectValue: this._id,\n      //disabled: !editingMainPage() //currently not working\n      //disabled: (!Session.get('editedWall')), //!= this.wallID to apply to a single wall \n    }\n  }\n});\n\n\n  /*************************/\n /** STANDARD ITEM  *******/\n/*************************/\n\nTemplate.standardItem.helpers({\n  LoMAveragecolorcode: function() {\n    var studentID = Meteor.impersonatedOrUserId();\n    var standard = this;\n    if (!studentID || !standard)\n      return '';\n    var LoM = LevelsOfMastery.findOne({studentID:studentID,standardID:standard._id,visible:true});\n    if (!LoM) return '';\n\n    var colorcodes = ['LoMlow','LoMmedium','LoMhigh']\n    var level;\n    var maxVal;\n    var index;\n    if (_.isArray(standard.scale)) {\n      level = standard.scale.indexOf(LoM.average['schoolyear']); //update for grading period when available\n      maxVal = standard.scale.length;\n      index = Math.floor(level*3/maxVal);\n      index = Math.min(index,2);\n    }\n    if (_.isFinite(standard.scale)) {\n      level = LoM.average['schoolyear']; //update for grading period when available\n      maxVal = standard.scale;\n      index = Math.floor(level*3/maxVal);\n      index = Math.min(index,2);\n    }\n    return colorcodes[index];\n  },\n  LoMAveragetext: function() {\n    var studentID = Meteor.impersonatedOrUserId();\n    var standard = this;\n    if (!studentID || !standard)\n      return '';\n    var LoM = LevelsOfMastery.findOne({studentID:studentID,standardID:standard._id,visible:true});\n    if (!LoM) return '';\n    if (_.isArray(standard.scale))\n      return LoM.average['schoolyear']; //update for grading period when available \n    return +LoM.average['schoolyear'].toFixed(2) + ' out of ' + standard.scale;\n  },\n  humanizedScaleHelp: function() {\n    if (_.isFinite(this.scale))\n      return '0 to ' + this.scale;\n    return this.scaleHelp;\n  },\n  dateset: function() {\n    var wayInTheFuture = moment(wayWayInTheFuture()).subtract(1,'days').toDate();\n    return (this.masteryExpected < wayInTheFuture) ? 'dateset' : '';\n  }\n});\n\nTemplate.standardItem.events({\n  'click .standardSetCompletionDate': function(event,tmpl) {\n    Session.set('completionDate', this);\n  }\n});\n\n  /********************************/\n /*** SET COMPLETION DATE  *******/\n/********************************/\n\nvar dateTimeFormat = \"ddd, MMM D YYYY [at] h:mm a\";\nvar dateFormat = \"ddd, MMM D YYYY\";\n\nTemplate.setCompletionDate.onRendered(function() {\n  var instance = this;\n  instance.$('#completionDatePicker').datetimepicker({\n    inline: true,\n    format: \"MM/DD/YYYY\",\n    showClear: true\n  });\n})\n\nTemplate.setCompletionDate.helpers({\n  title: function() {\n    var standard = Session.get('completionDate');\n    var title = 'Set Completion Date';\n    if (standard)\n      title = standard.title;\n    return title;\n  }\n})\n\nTemplate.setCompletionDate.events({\n  'shown.bs.modal #setCompletionDate': function(event,tmpl) {\n    //position the modal as a popover and show the cartoon bubble arrow\n    var setCompletionDateButton = $(event.relatedTarget);\n    var setCompletionDatePopover = tmpl.$('#setCompletionDate');\n    setCompletionDatePopover.positionOn(setCompletionDateButton,'left');\n    $('body').css({overflow:'auto'}); //default modal behavior restricts scrolling\n   },\n   'show.bs.modal #setCompletionDate': function(event,tmpl) {\n     var standard = Session.get('completionDate');\n     var date = null;\n     if (standard) {\n      var wayInTheFuture = moment(wayWayInTheFuture()).subtract(1,'days').toDate();\n      if (standard.masteryExpected < wayInTheFuture) \n        date = standard.masteryExpected;\n    }\n    tmpl.$('#completionDatePicker').data('DateTimePicker').date(date);\n   },\n  'dp.change #completionDatePicker': function(event,tmpl) {\n    var date = (event.date) ? event.date.startOf('day').toDate() : wayWayInTheFuture(); //the dateIsNull function treats longLongAgo as a null value\n    var standard = Session.get('completionDate');\n    if (!standard) return;\n    Meteor.call('updateStandard',{\n      _id:standard._id,\n      masteryExpected: date\n    },alertOnError);\n  },\n  'hide.bs.modal #setCompletionDate': function(event,tmpl) {\n    Session.set('completionDate',null);\n    tmpl.$('#completionDatePicker').data('DateTimePicker').date(null);\n  }\n})\n\n  /*************************/\n /*** NEW STANDARD  *******/\n/*************************/\n\nTemplate.newStandard.helpers({\n  fixedFields: function() {\n    return {categoryID:this._id}\n  }\n})\n\n",
			"file": "client/views/openlab/standards_list.js",
			"file_size": 11127,
			"file_write_time": 130869364509528392,
			"settings":
			{
				"buffer_size": 11236,
				"line_ending": "Unix"
			}
		},
		{
			"file": "collections/levelsOfMastery.js",
			"settings":
			{
				"buffer_size": 12051,
				"line_ending": "Unix"
			}
		},
		{
			"file": "client/stylesheets/standards_list.css",
			"settings":
			{
				"buffer_size": 3604,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package control: Install Package",
				"Package Control: Install Package"
			]
		],
		"width": 396.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/solargreen/meteor/OpenLabv2",
		"/home/solargreen/meteor/OpenLabv2/client",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets",
		"/home/solargreen/meteor/OpenLabv2/client/views",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodPopoverX",
		"/home/solargreen/meteor/OpenLabv2/collections",
		"/home/solargreen/meteor/OpenLabv2/methods"
	],
	"file_history":
	[
		"/home/solargreen/meteor/OpenLabv2/collections/levelsOfMastery.js",
		"/home/solargreen/meteor/OpenLabv2/collections/standards.js",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodPopoverX/workPeriodPopoverX.html",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodPopoverX/workPeriodPopoverX.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/activity_statuses.css",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodPopoverX/workPeriodButton.js",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodPopoverX/workPeriodButton.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/block.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/block.html",
		"/home/solargreen/meteor/OpenLabv2/server/publications.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/activityPage.js",
		"/home/solargreen/meteor/OpenLabv2/collections/memberships.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/activity_page.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/column.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/wall.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/wall.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/activityPage.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/column.html",
		"/home/solargreen/meteor/OpenLabv2/methods/groupMethods.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/helpers/group_helpers.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/activities_list.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/assessment/assessmentPage.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/activities_list.html",
		"/home/solargreen/meteor/OpenLabv2/collections/walls.js",
		"/home/solargreen/meteor/OpenLabv2/methods/sectionMethods.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/assessmentPage.css",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/standard_page.css",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/helpers/login_buttons_session.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/standard/standardPage.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/standard/standardPage.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/standards_list.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/assessment/assessmentPage.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/assessment/assessmentHeader.html",
		"/home/solargreen/meteor/OpenLabv2/lib/routes.js",
		"/home/solargreen/meteor/OpenLabv2/collections/blocks.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/assessment/assessmentHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/summernote/toolbars.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/viewAs.html",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/viewAs.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/helpers/section_helpers.js",
		"/home/solargreen/meteor/OpenLabv2/client/summernote/summernote.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/standard/standardHeader.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/assessment/standardHeader.html",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/chooseStandardsModal.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/standards_list.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/chooseStandardsModal.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/chooseStandardsModal.js",
		"/home/solargreen/meteor/OpenLabv2/collections/groups.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/login_buttons_dialogs.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/login_buttons_dialogs.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/helpers/activityPageSession.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/application.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/openlab.html",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/openlab.css",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/login_buttons.html",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/standards_list.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/activities_list.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/helpers/wallHelpers.js",
		"/home/solargreen/meteor/OpenLabv2/collections/activities.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/groups.html",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/groups.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/activityHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/summernote.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/openlabHeader.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/openlabHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/standard/standardHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/siteAdmin/siteAdmin.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/siteAdmin/siteAdminHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/siteAdmin/siteAdminHeader.html",
		"/home/solargreen/meteor/OpenLabv2/collections/activityProgress.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/siteAdmin/siteAdmin.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/openlab.js",
		"/home/solargreen/meteor/OpenLabv2/client/main.html",
		"/home/solargreen/meteor/OpenLabv2/client/main.js",
		"/home/solargreen/meteor/OpenLabv2/client/layout.html",
		"/home/solargreen/meteor/OpenLabv2/server/init.js",
		"/home/solargreen/meteor/meteor.nginx.conf",
		"/home/solargreen/meteor/OpenLabv2/collections/activityStatuses.js",
		"/home/solargreen/meteor/OpenLabv2/server/fixtures.js",
		"/home/solargreen/meteor/OpenLabv2/collections/files.js",
		"/home/solargreen/meteor/OpenLabv2/client/plaintexteditor/plaintexteditor.js",
		"/home/solargreen/meteor/OpenLabv2/client/summernote/summernote.js",
		"/home/solargreen/meteor/OpenLabv2/client/helpers/roleHelpers.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/helpers/openlabSession.js",
		"/home/solargreen/meteor/OpenLabv2/methods/MatchHelpers.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/openlab/openlabHeader.html.bak",
		"/home/solargreen/meteor/OpenLabv2/collections/workPeriods.js",
		"/home/solargreen/meteor/OpenLabv2/methods/sortable1cMethods.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/siteAdmin.css",
		"/home/solargreen/meteor/OpenLabv2/collections/sections.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/views/validateAccounts/validateAccounts.js",
		"/home/solargreen/meteor/OpenLabv2/collections/gradingPeriods.js",
		"/home/solargreen/meteor/OpenLabv2/client/custom-accounts-ui/login_buttons.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/workPeriod.css",
		"/home/solargreen/meteor/OpenLabv2/collections/site.js",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/headers.css",
		"/home/solargreen/meteor/OpenLabv2/collections/categories.js",
		"/home/solargreen/meteor/OpenLabv2/server/users.js",
		"/home/solargreen/meteor/OpenLabv2/server/schoolAccountsPublications.js",
		"/home/solargreen/meteor/OpenLabv2/collections/units.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/activity/activityHeader.html",
		"/home/solargreen/meteor/OpenLabv2/methods/showHideMethods.js",
		"/home/solargreen/meteor/OpenLabv2/collections/columns.js",
		"/home/solargreen/meteor/OpenLabv2/methods/blockMethods.js",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodGauge/workPeriodGauge.js",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/helpers/statusColors.js",
		"/home/solargreen/meteor/OpenLabv2/methods/dateTimeHelpers.js",
		"/home/solargreen/meteor/OpenLabv2/client/workPeriod/workPeriodGauge/workPeriodGauge.html",
		"/home/solargreen/meteor/OpenLabv2/client/helpers/alertOnError.js",
		"/home/solargreen/meteor/OpenLabv2/client/helpers/parentTemplate.js",
		"/home/solargreen/meteor/OpenLabv2/client/helpers/dateTimeHelpers.js",
		"/home/solargreen/meteor/OpenLabv2/collections/users.js",
		"/home/solargreen/meteor/OpenLabv2/lib/router.js.bak",
		"/home/solargreen/meteor/OpenLabv2/lib/router.js",
		"/home/solargreen/meteor/OpenLabv2/client/bootstrap-popover-x/bootstrap-popover-x.min.css",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/workPeriodGauge.css",
		"/home/solargreen/meteor/OpenLabv2/client/stylesheets/group_modals.css",
		"/home/solargreen/meteor/OpenLabv2/client/views/progressandplan/progressPlan.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/progressandplan/helpers/openlabSession.js",
		"/home/solargreen/meteor/OpenLabv2/client/views/progressandplan/activities_list.html",
		"/home/solargreen/meteor/OpenLabv2/client/views/application/layout.html",
		"/home/solargreen/meteor/OpenLabv2/client/pages/progressandplan/helpers/openlabSession.js",
		"/home/solargreen/meteor/OpenLabv2/client/pages/progressandplan/helpers/editingMainPage.js",
		"/home/solargreen/meteor/OpenLabv2/client/pages/progressandplan/activities_list.html",
		"/home/solargreen/meteor/OpenLabv2/client/pages/progressandplan/activities_list.js",
		"/home/solargreen/meteor/OpenLabv2/client/pages/progressandplan/progressPlanHeader.js",
		"/home/solargreen/meteor/OpenLabv2/client/pages/activity/wall.js",
		"/home/solargreen/meteor/OpenLabv2/client/pages/activity/helpers/wallHelpers.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sItem",
			"date",
			"hover",
			"assessment",
			"Meteor.su",
			"console.log",
			"subactivityItem",
			"assignment",
			"standardID",
			"subscribe",
			"subscr",
			"status",
			"block",
			"_id",
			"date",
			"      \n",
			"defaultText",
			"newu",
			"unit",
			"unittitle.active",
			"cu",
			"glyphicon",
			"check",
			"canEditBlock",
			"Meteor.users",
			"users",
			"Meteor.users",
			"block.type",
			"Units.",
			"lastO",
			"firstUnit",
			"first",
			".modal-backdrop",
			"|| Sections.findOne()",
			"selected",
			"currentStatus",
			"console",
			"Future",
			"Ago",
			"Session.set",
			"Seld",
			"date(",
			"Session.set",
			"denormalize",
			"Format",
			"dateFormat",
			"id=\"activities\"",
			"id='activities'",
			"today",
			".unittitle",
			"Session",
			"aitem",
			"newI",
			"activity Item",
			"theActivityID",
			"i.fa",
			"glyph",
			":hover",
			"editing",
			"editingMainPageTF",
			"editingMainPage",
			"cursor:",
			"active",
			"Meteor.call",
			"console.log",
			"Meteor.call",
			"'abc'",
			"Meteor.Collection.ObjectID",
			"inEdited",
			"summernoteOptions",
			"editing",
			"blockTitle",
			"editing",
			"inEditedWall()",
			"editing",
			"inEditedWall",
			"inEditedWall()",
			"fileCount",
			"Session.get('editedWall')",
			"cursor: p",
			".block",
			"block",
			"block-",
			" p ",
			"p ",
			"summernote",
			"bg-",
			"position",
			".inEditedWall",
			"console.log",
			".editTitle",
			"fontsize",
			"this.fontsize",
			"styleWithSpan",
			"');\n",
			"inEditedWall",
			"icon-list",
			"list",
			"button",
			"parentData",
			"btn",
			"columnd",
			"section",
			">\n",
			"inclass",
			"#todos",
			".todos",
			"mostRecentLoMs",
			"mostRecent",
			"#assessmentV",
			".newL",
			"#assessmentVersion",
			"ui-state-highlight",
			"ui-state",
			"creator",
			"tab-",
			"modal",
			".Mo",
			"sortable",
			".sortable",
			" e ",
			"(e)",
			".saveNewAssessment",
			"newAssessment.description =",
			"description",
			"if (newAssessment",
			"type",
			"modal"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Meteor.Collection.ObjectID()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "client/views/openlab/standards_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5727,
						"regions":
						{
						},
						"selection":
						[
							[
								4102,
								4102
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "client/views/openlab/standards_list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11236,
						"regions":
						{
						},
						"selection":
						[
							[
								4352,
								4352
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "collections/levelsOfMastery.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12051,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3009.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "client/stylesheets/standards_list.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3604,
						"regions":
						{
						},
						"selection":
						[
							[
								3105,
								3105
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1887.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.485368052427,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "OpenLabv2.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/meteor/OpenLab/OpenLab.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 235.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
